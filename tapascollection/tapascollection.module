<?php

/**
 * @file
 * Code for the tapascollection module
 *
 * TODO: Prevent edit from changing the slug.
 * TODO: Enforce slug uniqueness and character limitations
 */


// ====================================================================================
// Functions implementing hooks
// ====================================================================================

/**
 * Implements hook_node_info().
 *
 * Creates the TPAPAS Project and TAPAS Collection node types.
 */

function tapascollection_node_info() {

	$items = array(
		'tapascollection_project' => array(
			'name' => t('TAPAS Project'),
			'base' => 'node_content',
			'description' => t(''),
			'has_title' => TRUE,
			'title_label' => t('Project Title'),
			'help' => t(''),
		),
		'tapascollection_collection' => array(
			'name' => t('TAPAS Collection'),
			'base' => 'node_content',
			'description' => t(''),
			'has_title' => TRUE,
			'title_label' => t('Collection Title'),
			'help' => t(''),
		),
	);

	drupal_alter('node_info', $items);
	return $items;

}

/** 
 * implements hook_form()
 * 
 * This has to be present even if it's just a pass-through,
 * otherwise the content type won't appear in the 
 * admin/structure/types list 
 */
function tapascollection_form($node, $form_state) {
  return node_content_form($node, $form_state);
}


/**
 * Implements hook_node_insert()
 */

function tapascollection_node_insert($node) {
	//global $user;

	switch($node->type) {
		case 'tapascollection_project':
			$data = _tapascollection_post_data($node, 'members', $node->uid);
			$result = tapashydra_post_project($node, $data);
			break;
		case 'tapascollection_collection':
			$parent_slug = _tapashydra_simpleval($node, 'tc_field_slug');
			$data = _tapascollection_post_data($node, 'proj_did', $parent_slug);
			$result = tapashydra_post_project($node, $data);
			break;
	}
	if (isset($result)) {
		drupal_set_message("Hydra Return Value: $result");
	}
	else {
		drupal_set_message("No hydra return vaue.");
	}
}

/** 
 * Implements hook_node_update().
 */

function tapascollection_node_update($node) {

	switch($node->type) {
		case 'tapascollection_project':
			$members = _tapascollection_get_group_members();
			$data = _tapascollection_post_data($node, 'members', $members);
			$result = tapashydra_post_project($node, $data);
			break;
		case 'tapascollection_collection':
			$parent_slug = _tapashydra_simpleval($node, 'tc_field_slug');
			$data = _tapascollection_post_data($node, 'proj_did', $parent_slug);
			$result = tapashydra_post_project($node, $data);
			break;
	}
	if (isset($result)) {
		drupal_set_message("Hydra Return Value: $result");
	}
	else {
		drupal_set_message("No hydra return vaue.");
	}
}


/**
 * Implements hook_node_delete().
 */

function tapascollection_node_delete($node) {
	$result = "";

	switch($node->type) {
		case 'tapascollection_project':
			tapashydra_delete_hydrarec(TAPASHYDRA_POST_PROJECT_URL, $node);
			break;
		case 'tapascollection_collection':
			tapashydra_delete_hydrarec(TAPASHYDRA_POST_COLLECTION_URL, $node);
			break;
	}

	if ($result) {
		drupal_set_message("Hydra return code: $result");
	}
	else {
		drupal_set_message("No hydra return code.");
	}
}


// ====================================================================================
// Internal Helper Functions
// ====================================================================================

/**
 * Internal. Returns a list of user-ids that are a member of the given project or collection.
 *
 * @param $node: The project or collection node
 * @return array: A list of user-ids of users who are members of the group represented by $node
 */

function _tapascollection_get_group_members($node) {
	//return og_get_group_members_properties($node, array(), OG_STATE_ACTIVE, 'node');
	return $node->uid;

}

/**
 * Internal. Builds $data string for tapashydra POST calls.
 * @param $node: The Drupal node to post.
 * @param $extra_key: key specific to collection or project, not both
 * @param $extra_value: the value associated with said key.
 *
 * @return: Array. The 
 *
 * In practice, the extra_key/extra_value is for passing a member list
 *   when a project is being added or updated, and for posting the 
 *   parent project's slug when a collection is being updated.
 */

function _tapascollection_post_data($node, $extra_key, $extra_value) {

	$uid = $node->tc_field_slug['und'][0]['value'];
	$depositor = $node->uid;
	$access = $node->group_access['und'][0]['value']?'private':'public';
	$title = $node->title;
	$description = _tapashydra_simple_fieldval($node, 'tc_field_description');
	$thumbnail = _tapashydra_filestring($node, 'tc_field_image');

	$data = array(
		'depositor' => $depositor,
		'access' =>  $access,
		'title' =>  $title,
		'description' => $description,
		'uid' =>  $uid, 
	);

	if ($thumbnail) {
		$data['thumbnail'] = $thumbnail;
	}

	if (isset($extra_key)) {
		$data[$extra_key] = "$extra_value";
	}

	return $data;
}
