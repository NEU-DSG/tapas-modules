<?php
/**
 * @file
 * Code for the tapascollection module
 */

define("TAPASCOLLECTION_HYDRA_PROJECT_URL", "https://localhost:3000/communities:");
define("TAPASCOLLECTION_HYDRA_COLLECTION_URL", "https://localhost:3000/collections:");

/**
 * Implements hook_node_info().
 *
 * Creates the TPAPAS Project and TAPAS Collection node types.
 */

function tapascollection_node_info() {

	$items = array(
		'tapascollection_project' => array(
			'name' => t('TAPAS Project'),
			'base' => 'node_content',
			'description' => t(''),
			'has_title' => TRUE,
			'title_label' => t('Project Title'),
			'help' => t(''),
		),
		'tapascollection_collection' => array(
			'name' => t('TAPAS Collection'),
			'base' => 'node_content',
			'description' => t(''),
			'has_title' => TRUE,
			'title_label' => t('Collection Title'),
			'help' => t(''),
		),
	);

	drupal_alter('node_info', $items);
	return $items;

}

/** 
 * implements hook_form()
 * 
 * This has to be present even if it's just a pass-through,
 * otherwise the content type won't appear in the 
 * admin/structure/types list 
 */
function tapascollection_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Internal. Returns an array for proj and collection creation/updates
 *
 * This function returns an data array with the information that is common
 *   both to creating or updating a project, and to creating or updating a
 *   collection.
 *
 * @param $node: The project or collection node to add or update
 * @return array: common data elements.
 */

function _tapascollection_projcol_data($node) {
	
	$description = '';
	if (isset($node->tc_field_description[$node->language][0]['value'])) {
		$description = $node->tc_field_description[$node->language][0]['value'];
	}

	return array(
		'depositor' => $node->uid,
		'thumbnail' => $node->tc_field_image['und'][0]['value'],
		'access' => $node->group_access['und'][0]['value']?'private':'public',
		'title' => $node->title,
		'description' => $description,
		'slug' => $node->tc_field_slug['und'][0]['value']
	);
}

/**
 * Internal. The Hydra API call to create or update a project.
 *
 * @param $node: the project node to add or update
 * @param $members: The complete list of user IDs of people who should be
 *           members of the project
 * @return string: The code returned by the API call
 */

function _tapascollection_hydra_project($node, $members) {

	$data = _tapascollection_projcol_data($node);
	$data['members'] = $members;

	$url = TAPASCOLLECTION_HYDRA_PROJECT_URL . $data['slug'];

	//return implode(',', $data);
	return http_post_fields($url, $data);
}

/**
 * Internal. The Hydra API call to create or update a collection.
 *
 * @param $node: The collection node to add or update.
 * @return string: The code returned by the API call
 */

function _tapascollection_hydra_collection($node) {

	//$data = _tapascollection_projcol_data($node);
	//$data['project_did'] = ''; // $node Change content type to have the straight-up slug to make this easier.

	//$url = TAPASCOLLECTION_HYDRA_COLLECTION_URL . $data['slug'];

	//return "(http_post_fields commented out)";
	//return http_post_fields($url, $data);
}

/**
 * Implements hook_node_insert()
 */

function tapascollection_node_insert($node) {
	//global $user;

	switch($node->type) {
		case 'tapascollection_project':
			$result = _tapascollection_hydra_project($node, $node->uid);
			break;
		case 'tapascollection_collection':
			//$result = _tapascollection_hydra_collection($node);
			break;
	}
	if (isset($result)) {
		drupal_set_message("Hydra Return Value: $result");
	}
	else {
		drupal_set_message("No hydra return vaue.");
	}
}

/** 
 * Implements hook_node_update().
 */

function tapascollection_node_update($node) {

	//$result = "";
	//switch($node->type) {
		//case 'tapascollection_project':
			//$members = og_get_group_members_properties($node, array(), OG_STATE_ACTIVE, 'node');
			//$result = _tapascollection_hydra_post($node, $members);
			//break;
		//case 'tapascollection_collection':
			//$result = _tapascollection_hydra_collection($node);
	//}
	//if ($result) {
		//drupal_set_message($result);
	//}
}

/**
 * Implements hook_node_delete().
 */

function tapascollection_node_delete($node) {
	//$result = "";
	//switch($node->type) {
		//case 'tapascollection_project':
			//$result = _tapascollection_hydra_delete(TAPASCOLLECTION_HYDRA_PROJECT_URL, $node);
			//break;
		//case 'tapascollection_collection':
			//$result = _tapascollection_hydra_delete(TAPASCOLLECTION_HYDRA_COLLECTION_URL, $node);
			//break;
	//}
	//if ($result) {
		//drupal_set_message("Hydra return code: $result");
	//}
}

/**
 * Internal. Performs a Hydra project or collection DELETE api command.
 *
 * Extracts the slug from $node, appends it to the end of $base_url, and sends a DELETE http
 *   request to the resulting URL.
 *
 * @param $base_url: The API URL (without the slug)
 * @param $node: the project or collection node to be deleted.
 * @return string: The return code returned by the API.
 */

function _tapascollection_hydra_delete($base_url, $node) {
	
	//$slug = $node->tc_field_slug[und][0]['value'];
	//$url = $base_url . $slug;

	//return '(http_request DELETE commented out)';
	//return http_request('DELETE', $url);

}

/**
 * Internal. Returns a list of user-ids that are a member of the given project or collection.
 *
 * @param $node: The project or collection node
 * @return array: A list of user-ids of users who are members of the group represented by $node
 */

function _tapascollection_get_group_members($node) {
	//og_get_group_members_properties($node, array(), OG_STATE_ACTIVE, 'node');
	return $node->uid;

}

