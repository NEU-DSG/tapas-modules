<?php

/**
 * @file
 * Code for the tapascollection module
 *
 * @TODO: Prevent edit from changing the slug.
 * @TODO: Enforce slug uniqueness and character limitations
 *
 * @author Linda Moss (github LindaJeanne) <l.moss@neu.edu>
 * @since 2.0
 * @version 2.0
 */

include_once 'tapascollection_constants.inc';

// ====================================================================================
// Functions implementing hooks
// ====================================================================================

/**
 * Implements hook_node_info().
 *
 * Creates the TPAPAS Project and TAPAS Collection node types.
 */

function tapascollection_node_info() {

	$items = array(
		TAPAS_PROJECT => array(
			'name' => t('TAPAS Project'),
			'base' => 'node_content',
			'description' => t(''),
			'has_title' => TRUE,
			'title_label' => t('Project Title'),
			'help' => t(''),
		),
		TAPAS_COLLECTION => array(
			'name' => t('TAPAS Collection'),
			'base' => 'node_content',
			'description' => t(''),
			'has_title' => TRUE,
			'title_label' => t('Collection Title'),
			'help' => t(''),
		),
	);

	drupal_alter('node_info', $items);
	return $items;

}

/** 
 * implements hook_form()
 * 
 * This has to be present even if it's just a pass-through,
 * otherwise the content type won't appear in the 
 * admin/structure/types list 
 */
function tapascollection_form($node, $form_state) {
  return node_content_form($node, $form_state);
}


/**
 * Implements hook_node_insert()
 */

function tapascollection_node_insert($node) {
	//_tapascollection_node_post($node);
}

/** 
 * Implements hook_node_update().
 */

function tapascollection_node_update($node) {
	//_tapascollection_node_post($node);
}


/**
 * Implements hook_node_delete().
 */

function tapascollection_node_delete($node) {

	return;

	switch($node->type) {
		case TAPAS_PROJECT:
			$url = TAPASHYDRA_POST_PROJECT_URL;
			break;
		case TAPAS_COLLECTION:
			$url = TAPASHYDRA_POST_COLLECTION_URL;
			break;
		default:
			return;
	}

	$slug = tapashydra_simple_fieldval($node, TAPAS_FIELD_PREFIX, 'slug');
	$result = tapashydra_delete_hydrarec($url, $node, $slug);

	if ($result) {
		drupal_set_message("Hydra return code: $result");
	}
	else {
		drupal_set_message("No hydra return code.");
	}
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Used for hiding and disabling fields on the node creation and editing
 * forms for tapasproject and tapascollection content types.
 */
function tapascollection_form_node_form_alter(&$form, &$form_state, $form_id) {

	// We want this hidden whenever it appears in any form.
	//$form['og_roles_permissions']['#access'] = TRUE;
	//$form[TAPASCOLLECTION_FIELD_PREFIX . 'hidden_nodetitle'][#a

	//switch ($form['#node']->type) {
		//case 'tapascollection':
		//case 'tapasproject':

			//$prefix = TAPASCOLLECTION_FIELD_PREFIX;

			//// Hide certain fields, always
			//$fields_to_hide = array(
				//'og_roles_permissions',
				//$prefix . '_hidden_nodetitle',
				//$prefix . '_hidden_parentslug',
				//$prefix . '_hidden_imagename',
				//$prefix . '_hidden_institutionname'
			//);

			//foreach($fields_to_hide as $field) {
				//$form[$field]['#access'] = FALSE;
			//}

			//// Slug can only be set on record creation, not edited. 
			//if (isset($node->nid) && !isset($node->is_new)) {
				//$form[$prefix . '_slug']['#disabled'] = TRUE;
			//}
	//}
}

// ====================================================================================
// Internal Helper Functions
// ====================================================================================

/**
 * Internal. Returns a list of user-ids that are a member of the given project or collection.
 *
 * @param $node: The project or collection node
 * @return array: A list of user-ids of users who are members of the group represented by $node
 */

function _tapascollection_get_group_members($node) {
	//return og_get_group_members_properties($node, array(), OG_STATE_ACTIVE, 'node');
	return $node->uid;

}

/**
 * Internal. Calls tapashydra post on a proect or a collection.
 * 
 * @param $node: The Drupal node to post.
 * @param $extra_key: key specific to collection or project, not both
 * @param $extra_value: the value associated with said key.
 * @param $url: Which POST url to post to. See constants in tapashydra.
 *
 * @return: Array. The 
 *
 * In practice, the extra_key/extra_value is for passing a member list
 *   when a project is being added or updated, and for posting the 
 *   parent project's slug when a collection is being updated.
 */

function _tapascollection_posthydra($node, $extra_key, $extra_value, $url) {

	$uid = $node->tc_field_slug['und'][0]['value'];
	$depositor = $node->uid;
	$access = $node->group_access['und'][0]['value']?'private':'public';
	$title = $node->title;
	$description = tapashydra_simple_fieldval($node, 'tc_field_description');
	$thumbnail = tapashydra_filestring($node, 'tc_field_image');

	$data = array(
		'depositor' => $depositor,
		'access' =>  $access,
		'title' =>  $title,
		'description' => $description,
		'uid' =>  $uid, 
	);

	if ($thumbnail) {
		$data['thumbnail'] = $thumbnail;
	}

	if (isset($extra_key)) {
		$data[$extra_key] = "$extra_value";
	}

	return tapashydra_posthydra($data, $url);
}

/**
 * Handles POST for insert and update
 *
 * @param $node: The node to post to hydra
 * @return: The hydra return code, if any. Usually a string message.
 */
function _tapascollection_node_post($node) {

	switch($node->type) {
		case 'tapascollection_project':
			$field = 'members';
			$value = _tapascollection_get_group_members($node);
			$url =TAPASHYDRA_POST_PROJECT_URL;
			break;
		case 'tapascollection_collection':
			$field = 'proj_did';
			$value = _tapashydra_simple_fieldval(
				$node, 
				TAPAS_FIELD_PREFIX . 'parent_slug'
			);
			$url = TAPASHYDRA_POST_COLLECTION_URL;
			break;
		default:
			return;
	}


	$result = _tapascollection_posthydra($node, $field, $value, $url);

	if ($result) {
		drupal_set_message("Hydra Return Value: $result");
	}
	else {
		drupal_set_message("No hydra return vaue.");
	}
	
	return $result;

}
