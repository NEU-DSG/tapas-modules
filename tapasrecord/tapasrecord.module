<?php

/**
 * @file
 * tapasrecord.module TAPAS TEI upload and transformation
 * 
 * defines tapas_record conent type, performs
 * TEI upload and validation, calls TFC transform.
 */


// ====================================================================================
// Functions Implementing Hooks
// ====================================================================================

/**
 * implements hook_node_info()
 *
 * Defines the TAPAS record content type
 *
 * I considered making this an entity rather than a node, since node brings
 * along extra baggage that we don't need. However, Drupal's access-control
 * system is node-based; therefore, it would be far more difficult to enforce
 * access restrictions on a custom entity than on a custom node type.
 */

function tapasrecord_node_info()
{
  return array(
    'tapasrecordnode' => array(
      'name' => t('TAPAS Record'),
      'base' => 'tapasrecordnode',
      'description' => t('Holds a TEI record along with it\'s associated metadata and TFC'),
      'has_title' => TRUE,
      'title_label' => t('Record Title'),
      'help' => '',
    ),
  );
}

/** 
 * implements hook_form()
 * 
 * This has to be present even if it's just a pass-through,
 * otherwise the content type won't appear in the 
 * admin/structure/types list 
 */
function tapasrecordnode_form($node, $form_state) {
  return node_content_form($node, $form_state);
}


/**
 * implements hook_node_insert().
 *
 * Just a call to _tapasrecord_node_post, since update and insert are the same.
 */

function tapasrecord_node_insert($node) {
	_tapasrecord_node_post($node);
}


/**
 * implements hook_node_update().
 *
 * Just a call to _tapasrecord_node_post, since update and insert are the same.
 */

function tapasrecord_node_update($node) {
	_tapasrecord_node_post($node);
}

/**
 * Internal. POST call for update or insert.
 */

function _tapasrecord_node_post($node) {

	if ($node->node_type != 'tapasrecordnode') {
		return;
	}

	$data = tapasrecord_httpdata($node);

}

/**
 * implements hook_node_delete().
 */

function tapasrecord_node_delete($node) {


}


// ====================================================================================
// Helper Functions
// ====================================================================================

/**
 * Internal. Builds the data array to post to hydra on instert/update
 *
 * @param $node: The node that will be posted.
 */

function _tapasrecord_httpdata($node) {


	$data = array(
		'collection_dids' => tapashydra_php_to_http_array(
			og_get_entity_groups('node', $node), 'collection_dids'),
		'depositor' => $node->uid,
		'file_types' => tapashydra_drupal_field_to_http_array($node, 'field_tapas_tei_type'),
		'display_author' => tapashydra_simple_fieldval($node, 'tc_display_authors'),
		'display_contributors' => tapashydra_drupal_field_to_http_array($node, 'tc_display_contributors'),
		'display_date' => tapashydra_simple_fieldval($node, 'tc_timeline_date'), // I thought we weren't sending this to Hydra?
		'tei:'=> tapashydra_filestring($node, 'tapas_teifile'),
		'support_files' => _tapasrecord_auxillary_curlzip($node),
	);

//function tapashydra_filestring($node, $field_name, $val_if_unset='', $delta=0) {
	drupal_set_message("Tapasrecord data array: " . http_build_query($data, '', ' | '));
}

/** 
 * Interhal. Assembles the zip file of auxillary files.
 */

function _tapasrecord_auxillary_curlzip($node) {

}
