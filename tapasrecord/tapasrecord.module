<?php

define("TAPAS_VALIDATION_XSLT_SUBDIRECTORY", "/validate/");
define("TAPAS_SAVE_FILE_ROOT_DIRECTORY", "public://tapasrecord");
define("TAPAS_TFC_TRANSFORM_FILENAME", "tfc_transform.xsl");
define("TAPASRECORD_SHOW_INTERNAL_ERRS", TRUE);

define("TAPAS_ERROR_MESSAGE_OUR_END", t("There seems to be a problem at our end, trying to process this file. " .
	"Please open a support ticket showing the following error message, and we'll get it fixed as soon as we can!"));
define("TAPAS_ERROR_MESSAGE_FILE_ERR", t("We are unable to process this file. This could be because of a problem " .
	"with the XML in the file itself, or, it might be valid TEI that we are not yet equipped to handle. If you are " .
	"confident that the TEI is valid, please open a support ticket so that we can (hopefully!) improve our system."));
define("TAPAS_ERROR_MESSAGE_UNKNOWN", t("We are unable to upload this file; please double-check that it is the " .
	"correct one."));

// TODO: Use private file system rather than public
// TODO: Properly set path of saved files (project, collection).
// TODO: Make TEI field mandatory for new (NOT updated) TAPAS Record nodes
// TODO: REmove the TFC field, since we don't need that to be a field.
// TODO: Handle TEI upload name collisions

// TODO: Settings page to choose public or private?
// TODO: Settings page to choose XSLT subdirectory?
// TODO: Settings page to choose name/location of transform file?
// TODO: Should each *record* have a folder, for the tei, tfc, and all attatchments?
//       tapasrecord/project/collection/node_id_num/

/**
 * @file
 * tapasrecord.module TAPAS TEI upload and transformation
 * 
 * defines tapas_record conent type, performs
 * TEI upload and validation, calls TFC transform.
 */

/**
 * implements hook_node_info()
 *
 * Defines the TAPAS record content type
 *
 * I considered making this an entity rather than a node, since node brings
 * along extra baggage that we don't need. However, Drupal's access-control
 * system is node-based; therefore, it would be far more difficult to enforce
 * access restrictions on a custom entity than on a custom node type.
 */

function tapasrecord_node_info()
{
  return array(
    'tapasrecordnode' => array(
      'name' => t('TAPAS Record'),
      'base' => 'tapasrecordnode',
      'description' => t('Holds a TEI record along with it\'s associated metadata and TFC'),
      'has_title' => TRUE,
      'title_label' => t('Record Title'),
      'help' => '',
    ),
  );
}

/** 
 * implements hook_form()
 * 
 * This has to be present even if it's just a pass-through,
 * otherwise the content type won't appear in the 
 * admin/structure/types list 
 */
function tapasrecordnode_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/** 
 * Implements hook_form_FORM_ID_alter().
 */
function tapasrecord_form_tapasrecordnode_node_form_alter(&$form, &$form_state, $form_id) {

	// TAPAS TEI field
	$form['tapas_teifield'][LANGUAGE_NONE][0] = array_merge(
    $form['tapas_teifield'][LANGUAGE_NONE][0],
		_tapasrecord_form_teifield($form_id)
	);

}

function _tapasrecord_form_teifield($form_id) {
	return array(
		'#type' => 'managed_file',
		'#title' => t('TEI file'),
		'#description' => t('allowed extentions: .tei, .xml'),
		'#upload_location' => _tapasrecord_get_file_upload_location(),
		'#upload_validators' => array(
			'file_validate_extensions' => array('tei xml'),
			'tapasrecord_validate_tei' => array($form_id),
		),
  );

}

function _tapasrecord_get_file_upload_location() {
	// TODO: will add subdirectories for project and collections, and add a directory_prepare
	return TAPAS_SAVE_FILE_ROOT_DIRECTORY;
}



/**
 * Callback to run the validation XSLT checks on the TEI file.
 */
function tapasrecord_validate_tei($file, $form_id) {

	module_load_include('inc', 'tapasrecord', 'tapasrecord.xmlproc');

	$errors = array();

	$err_msg = TAPAS_ERROR_MESSAGE_FILE_ERR . ": Unable to load the TEI file.";
	$teiDOM = tapasrecord_domdoc_load($file->uri, $err_msg, $errors);
	if ($errors) {
		return $errors;
	}


	$errors = _tapasrecord_validate_xslt($teiDOM);
	if ($errors) {
		return $errors;
	}

	drupal_set_message(_tapasrecord_extract_tei_metadata($teiDOM));

	return _tapasrecord_run_transform($teiDOM, $file);
}

