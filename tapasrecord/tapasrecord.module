<?php

//define("TAPAS_VALIDATION_XSLT_SUBDIRECTORY", "/validate/");
define("TAPAS_SAVE_FILE_ROOT_DIRECTORY", "public://tapasrecord");


define("TAPASRECORD_HYDRA_POST_URL", "https://rails_api.localhost:8080/files");

define("TAPASRECORD_HYDRA_BASE_GET", "https://rails_api.localhost:8080/");
define("TAPASRECORD_HYDRA_GET_RAW", "tei");
define("TAPASRECORD_HYDRA_GET_BP", "teibp");
define("TAPASRECORD_HYDRA_GET_GENERIC", "tapas_generic");

// TODO: Make TEI field mandatory for new (NOT updated) TAPAS Record nodes

/**
 * @file
 * tapasrecord.module TAPAS TEI upload and transformation
 * 
 * defines tapas_record conent type, 
 */

/**
 * implements hook_node_info()
 *
 * Defines the TAPAS record content type
 *
 * I considered making this an entity rather than a node, since node brings
 * along extra baggage that we don't need. However, Drupal's access-control
 * system is node-based; therefore, it would be far more difficult to enforce
 * access restrictions on a custom entity than on a custom node type.
 */

function tapasrecord_node_info()
{
  return array(
    'tapasrecordnode' => array(
      'name' => t('TAPAS Record'),
      'base' => 'tapasrecordnode',
      'description' => t('Holds a TEI record along with it\'s associated metadata and TFC'),
      'has_title' => TRUE,
      'title_label' => t('Record Title'),
      'help' => '',
    ),
  );
}

/** 
 * implements hook_form()
 * 
 * This has to be present even if it's just a pass-through,
 * otherwise the content type won't appear in the 
 * admin/structure/types list 
 */
function tapasrecordnode_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/** 
 * Implements hook_form_FORM_ID_alter().
 */
function tapasrecord_form_tapasrecordnode_node_form_alter(&$form, &$form_state, $form_id) {

	// TAPAS TEI field
	$form['tapas_teifield'][LANGUAGE_NONE][0] = array_merge(
    $form['tapas_teifield'][LANGUAGE_NONE][0],
		_tapasrecord_form_teifield($form_id)
	);

}


/**
 * Internal. Retuerns info for the 'upload TEI' form field.
 */

function _tapasrecord_form_teifield($form_id) {
	return array(
		'#type' => 'managed_file',
		'#title' => t('TEI file'),
		'#description' => t('allowed extentions: .tei, .xml'),
		'#upload_location' => TAPAS_SAVE_FILE_ROOT_DIRECTORY,// _tapasrecord_get_file_upload_location(),
		'#upload_validators' => array(
			'file_validate_extensions' => array('tei xml'),
			//'tapasrecord_validate_tei' => array($form_id),
		),
  );

}

/**
 * Implements hook_node_insert().
 */

function tapasrecord_node_insert($node) {

	switch ($node->type) {
		case 'tapasrecordnode':
			$result = _tapasrecord_post(
				TAPASRECORD_HYDRA_POST_URL,
				_tapasrecord_data($node));
			break;
	}
	if (isset($result)) {
		drupal_set_message("Hydra Return Value: $result");
	}
	else {
		drupal_set_message("No hydra return vaue.");
	}
}

/**
 * Implements hook_node_update().
 */
function tapasrecord_node_update($node) {

	switch ($node->type) {
		case 'tapasrecordnode':
			$result = _tapasrecord_post(
				TAPASRECORD_HYDRA_POST_URL,
				_tapasrecord_data($node));
			break;
	}
	if (isset($result)) {
		drupal_set_message("Hydra Return Value: $result");
	}
	else {
		drupal_set_message("No hydra return vaue.");
	}

}

/**
 * Implements hook_node_delete().
 */
function tapasrecord_node_delete($node) {

	switch ($node->type) {
		case 'tapasrecordnode':
			break;
	}
}
/**
 * Internal. Returns the data array for Hydra post new.
 */

function _tapasrecord_data($node) {
//collection_dids : An array of Drupal IDs that this CoreFile should be associated with. To update this, pass in a new array that will entirely replace the previous collection relationships.

//tei : The literal TEI file associated with this record. Reading interface versions of this file will be generated.

//display_author : A sanitized version of the principle author of this document's name.

//display_contributors : An array listing sanitized contributor names.

//display_date : A date. For any TEI record there are several dates associated with it that may be considered significant, but for our 1.0 launch we're just asking for a single date that will be used everywhere. Must be in the ISO-8601 format.

//support_files : A .zip file containing all of the files associated with this TEI record. When support file updates are required, every support file still attached to this TEI record must be sent in this zip; preexisting support type files are purged before adding new ones. Currently the only supported files are page images that are embedded in the TEI document and the thumbnail associated with this record. The expected zip file structure is this:

	return array(
		'collection_dids' => '',
		'tei' => '',
		'display_author' => '',
		'display_contributors' => '',
		'display_date' => '',
		'support_files' => NULL,
	);

}	


/**
 * Internal. Makes the POST api calls to Hydra.
 */
function _tapasrecord_post($base, $data) {
	$query = http_build_query($data, '', '&amp;');
	drupal_set_message("posting query: $query");

	$ch = curl_init("$base" . $data['slug'] . "?$query");
	curl_setopt($ch, CURLOPT_POST, TRUE);
	curl_exec($ch);
	curl_close($ch);

}

