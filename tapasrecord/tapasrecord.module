<?php
/**
 * @file
 * tapasrecord.module TAPAS TEI upload and transformation
 * 
 * defines tapas_record conent type, performs
 * TEI upload and validation, calls TFC transform.
 */

/**
 * implements hook_node_info()
 *
 * Defines the TAPAS record content type
 *
 * I considered making this an entity rather than a node, since node brings
 * along extra baggage that we don't need. However, Drupal's access-control
 * system is node-based; therefore, it would be far more difficult to enforce
 * access restrictions on a custom entity than on a custom node type.
 */

function tapasrecord_node_info()
{
  return array(
    'tapas_record' => array(
      'name' => t('TAPAS Record'),
      'base' => 'tapas_recordnode',
      'description' => t('Holds a TEI record along with it\'s associated metadata and TFC'),
      'has_title' => TRUE,
      'title_label' => t('Record Title'),
      'help' => '',
    ),
  );
	$content_type = node_type_set_defaults($node_example);
}

/**
 * Implements hook_node_type_insert()
 */

function tapasrecord_node_type_insert($info) {
	if ($info->type == 'tapas_recordnode')
	{
		// Create field instances
		field_info_cache_clear();
		field_create_instance(array(
			'field_name' => 'tapas_teifield',
			'entity_type' => 'node',
			'bundle' => 'tapas_recordnode',
			'label' => 'Original TEI File',
		));
		field_create_instance(array(
			'field_name' => 'tapas_teifield',
			'entity_type' => 'node',
			'bundle' => 'tapas_recordnode',
			'label' => 'TFC File',
		));
	}

}
/** implements hook_form()
 * 
 * This has to be present even if it's just a pass-through,
 * otherwise the content type won't appear in the 
 * admin/structure/types list (I have no idea what the
 * connection is, or why)
 */
function tapas_recordnode_form($node, $form_state) {
  return node_content_form($node, $form_state);
}
/**
 * Implements hook_validate().
 */
function tapas_recordnode_validate($node, $form, &$form_state) {

	$node = $form_state['node'];
	
	if (isset($node->nid) && !isset($node->is_new)) {
		// We are editing a record, not creating a new one. 
		// if the attached TEI file has not changed, then our custom
		// validation function is done.
		if (TRUE) {
			return;
		}
	}
	
	// If we reach this point, either the record is new, or a new 
	// TEI file has been attached.

	// Put the file into the temporary save-space
	$file = file_save_upload('file', array(_tapas_file_present, _tapas_file_extention));

	// Validate 
		
	// check extention
	if (TRUE /* wrong extension */) {
		// this should never be thrown since Drupal is checking before we get here.
		form_set_error('file', t("please upload a file ending in .tei or .xml"));
	}
	// check root element
	if (TRUE /* missing or wrong root element */) {
		form_set_error('file', t("Unable to recognize a TEI root element. Please double-check the file and try again."));
	}
	// run validattion script
	if (TRUE /* validation script failed*/) {
		form_set_error('file', t("Unable to validate TEI file."));
		
	}

}


function _tapas_file_present() {

}

function _tapas_file_extention() {

}

/**
 * Implements node_form_submit().
 */

function taoas_recordnode_form_submit($form, &$form_state) {

	$file = $form_state['storage']['file'];

	// Remove the file from tempoary storage and add it to permanent storage
	unset($form_state['storage']['file']);
	$file->status = FILE_STATUS_PERMANENT;
	file_save($file);

	// Perform TFC transform

	// Save the TFC file

	// Tell user we've finished
	drupal_set_message(t('The TAPAS record has been saved.'));

}


