<?php

/**
 * @file
 *
 * The Tapasrecord module handles the upload and display of TEI records.
 *
 * TODO: make TEI field mandatory for NEW records, but not UPDATED.
 */

//define("TAPAS_VALIDATION_XSLT_SUBDIRECTORY", "/validate/");
define("TAPAS_SAVE_FILE_ROOT_DIRECTORY", "public://tapasrecord");



// TODO: Make TEI field mandatory for new (NOT updated) TAPAS Record nodes


// ====================================================================================
// Functions implementing hooks
// ====================================================================================

/**
 * implements hook_node_info()
 *
 * Defines the TAPAS record content type
 *
 * I considered making this an entity rather than a node, since node brings
 * along extra baggage that we don't need. However, Drupal's access-control
 * system is node-based; therefore, it would be far more difficult to enforce
 * access restrictions on a custom entity than on a custom node type.
 */

function tapasrecord_node_info()
{
  return array(
    'tapasrecordnode' => array(
      'name' => t('TAPAS Record'),
      'base' => 'tapasrecordnode',
      'description' => t('Holds a TEI record along with it\'s associated metadata and TFC'),
      'has_title' => TRUE,
      'title_label' => t('Record Title'),
      'help' => '',
    ),
  );
}

/** 
 * implements hook_form()
 * 
 * This has to be present even if it's just a pass-through,
 * otherwise the content type won't appear in the 
 * admin/structure/types list 
 */
function tapasrecordnode_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/** 
 * Implements hook_form_FORM_ID_alter().
 */
function tapasrecord_form_tapasrecordnode_node_form_alter(&$form, &$form_state, $form_id) {

	// TAPAS TEI field
	$form['tapas_teifield'][LANGUAGE_NONE][0] = array_merge(
    $form['tapas_teifield'][LANGUAGE_NONE][0],
		_tapasrecord_form_teifield($form_id)
	);

}


/**
 * Internal. Retuerns info for the 'upload TEI' form field.
 */

function _tapasrecord_form_teifield($form_id) {
	return array(
		'#type' => 'managed_file',
		'#title' => t('TEI file'),
		'#description' => t('allowed extentions: .tei, .xml'),
		'#upload_location' => TAPAS_SAVE_FILE_ROOT_DIRECTORY,// _tapasrecord_get_file_upload_location(),
		'#upload_validators' => array(
			'file_validate_extensions' => array('tei xml'),
			//'tapasrecord_validate_tei' => array($form_id),
		),
  );

}

/**
 * Implements hook_node_insert().
 */

function tapasrecord_node_insert($node) {

	switch ($node->type) {
		case 'tapasrecordnode':
			$result = _tapasrecord_post(
				TAPASRECORD_HYDRA_POST_URL,
				_tapasrecord_data($node));
			break;
	}
	if (isset($result)) {
		drupal_set_message("Hydra Return Value: $result");
	}
	else {
		drupal_set_message("No hydra return vaue.");
	}
}

/**
 * Implements hook_node_update().
 */
function tapasrecord_node_update($node) {

	switch ($node->type) {
		case 'tapasrecordnode':
			$result = _tapasrecord_post(
				TAPASRECORD_HYDRA_POST_URL,
				_tapasrecord_data($node));
			break;
	}
	if (isset($result)) {
		drupal_set_message("Hydra Return Value: $result");
	}
	else {
		drupal_set_message("No hydra return vaue.");
	}

}

/**
 * Implements hook_node_delete().
 */
function tapasrecord_node_delete($node) {

	switch ($node->type) {
		case 'tapasrecordnode':
			break;
	}
}

// ====================================================================================
// Internal helper functions
// ====================================================================================

/**
 * Internal. Returns the data array for Hydra post new.
 */

function _tapasrecord_data($node) {

	return array(
		'collection_dids' => _tapasrecord_get_collections_for_hydra($node),
		'tei' => _tapasrecord_get_tei_for_hydra($node),
		'display_author' => '',
		'display_contributors' => '',
		'display_date' => '',
		'support_files' => _tapasrecord_get_support_files_for_hydra($node),
	);

}	


/**
 * Internal. Makes the POST api calls to Hydra.
 *
 * TODO: redundant with tapascollection. Combine somehow.
 */
function _tapasrecord_post($base, $data) {
	$query = http_build_query($data, '', '&amp;');
	drupal_set_message("posting query: $query");

	$ch = curl_init("$base" . $data['slug'] . "?$query");
	curl_setopt($ch, CURLOPT_POST, TRUE);
	curl_exec($ch);
	curl_close($ch);

}

/**
 * Internal. Gets the TEI file as needed by hydra.
 */

function _tapasrecord_get_tei_for_hydra($node) {

	return NULL;
}

/**
 * Internal. Get list of collection slugs for hydra.
 */

function _tapasrecord_get_collections_for_hydra($node) {


	return NULL;
}


/**
 * Internal. Get zipped support files for hydra.
 */

function _tapasrecord_get_support_files_for_hydra($node) {

	return NULL;

}

/**
 * Internal. Get value of field.
 *
 * TODO: redundant with tapascollection. Combine somehow.
 */

function _tapasrecord_fieldval($node, $field_name, $val_if_unset='', $delta=0) {

	$array = field_get_items('node', $node, $field_name);

	if ($array == FALSE) {
		return $val_if_unset;
	}
	else {
		//TODO: Only works for text-like fields. Image fields don't have ['value'] and need different treatment.
		return $array[0]['value'];
	}
}

