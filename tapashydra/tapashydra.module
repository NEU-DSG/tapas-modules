<?php

/**
 * @file
 * Contains the Hydra API calls used by the other TAPAS modules.
 */

include_once '/var/www/hydratoken.php';
define ('TAPASHYDRA_AUTH_TOKEN', HYDRA_APIKEY);
//NOTE: you will need to have a php file, not included in the git repo, at /var/www/hydratoken.php on
// the machine where the website is hosted. This will need to contain the following text:
//   <?php
//   define('HYDRA_APIKEY', 'YOUR_KEY_HERE');


//define('TAPASHYDRA_AUTH_TOKEN', 'tapas12345'); // VM token

define('TAPASHYDRA_BASE_API_URL', 'http://rails_api.localhost:8080');

define('TAPASHYDRA_POST_PROJECT_URL', TAPASHYDRA_BASE_API_URL . "/communities");
define('TAPASHYDRA_POST_COLLECTION_URL', TAPASHYDRA_BASE_API_URL . "/collections");
define('TAPASHYDRA_POST_TEI_URL', TAPASHYDRA_BASE_API_URL . "/files");

define('TAPASHYDRA_GET_RAW', 'tei');
define('TAPASHYDRA_GET_BP', 'teibp');
define('TAPASHYDRA_GET_GENERIC', 'tapas_generic');

define("TAPASRECORD_INCLUDE_CURL_DEBUG", TRUE);


// ====================================================================================
// Creating, Updating, and Deleting Hydra records.
// ====================================================================================

/**
 * POST new or updated project or collection to Hydra.
 *
 * @param $data: The curl data fields to post.
 * @param $url_base: Which api URL to post to.
 *
 * @return: the message string returned by Hydra.
 */

function tapashydra_posthydra($data, $url_base) {

	$url = "$url_base/" . $data['uid'];

	drupal_set_message("data array being used: " . http_build_query($data, '', ' | '));

	$curl_options = array(
		CURLOPT_POST => TRUE,
		CURLOPT_POSTFIELDS => $data,
	);

	return _tapashydra_curl_call($url, $curl_options);

}

/**
 * Delete a record from Hydra.
 *
 * @param: The base url to use.
 * @param: The node to be deleted.
 * @return: value returned by Hydra.
 */

function tapashydra_delete_hydrarec($base, $node) {

	$slug = $node->tc_field_slug['und'][0]['value'];
	$url = "$base/$slug";

	$curlopts = array(
		'CURLOPT_CUSTOMREQUEST', 'DELETE');

	return _tapashydra_curl_call($url, $curlopts);

}

// ====================================================================================
// Retrieving and displaying TEI records from Hydra
// ====================================================================================



// ====================================================================================
// Helper functions: Perform the curl HTTP call.
// ====================================================================================



/**
 * Provdes an array of curloptions used for debugging.
 */

function _tapashydra_curl_debug_opts() {

	if (TAPASRECORD_INCLUDE_CURL_DEBUG) {
		$result = array(
			CURLOPT_RETURNTRANSFER => TRUE,
			CURLOPT_VERBOSE => TRUE,
			CURLINFO_HEADER_OUT => TRUE,
			CURLOPT_HEADER => TRUE,
		);
	} else {
		$result = array();
	}

	return $result;

}

/**
 * makes a curl call
 *
 * @param $url: The url to call.
 * @param $additional_options: options that aren't common to all calls.
 *
 * The only options 'common to all calls' are CURLOPT_URL (built from the
 *   $url_suffix provided), CURLOPT_HTTPHEADER (hardcoded) and, if debugging
 *   is turned on, several debugging settings.
 *
 * @return The Hydra return code, if any.
 */

function _tapashydra_curl_call($url, $additional_options=array()) {

	drupal_set_message("API url being used: $url");

	$header = array(
		'Authorization: Token token=' . TAPASHYDRA_AUTH_TOKEN,
	);

	$common_opts = array(
		CURLOPT_URL => $url,
		CURLOPT_HTTPHEADER => $header,	
	);


	// Debugging note: if array_merge is used, the keys change to 0, 1, 2, etc, and
	// everything breaks.
	$curlopt = $additional_options + _tapashydra_curl_debug_opts() + $common_opts;

	drupal_set_message("List of options being called: " . http_build_query($curlopt, '', ' | '));

	$ch = curl_init($url);

	$success = curl_setopt_array($ch, $curlopt);
	if (!$success) {
		drupal_set_message("##One or more of the options failed on set.");
		return FALSE;
	} else {
		drupal_set_message("##Options set without error.");
	}

	$result = curl_exec($ch);

	if (TAPASRECORD_INCLUDE_CURL_DEBUG) {
		_tapashydra_curl_messages($ch, $result);
	}
	curl_close($ch);
	return $result;
}

/**
 * Prints curl debugging information to the message area.
 *
 * @param $ch, the curl-handle we are printing results from.
 * @param $result, the result passed back from hydra.
 */

function _tapashydra_curl_messages($ch, $result) {

		$header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
		$return_header = substr($result, 0, $header_size);
		$body = substr($result, $header_size);

		drupal_set_message("### Header ### " . $return_header);
		drupal_set_message("### Body ### " . $body);
		drupal_set_message("### Header Out ### " . curl_getinfo($ch, CURLINFO_HEADER_OUT));

}
// ====================================================================================
// Other helper functions.
// ====================================================================================

/**
 * Internal. Syntactic sugar to get the value of a Drupal node field.
 *
 * Only works for fields that have a simple string or numeric value. Not for
 * use with fields that contain a file, etc.
 *
 * @param $node: The Drupal node who's field value we are checking.
 * @param $field_name: The name of the field.
 * @param $val_if_unset: The string to return if the field value is unset. (default '')
 * @param $delta: If the field has more than one value, which to return (default 0)
 *
 * @return string or number: The value of the field.
 */

function tapashydra_simple_fieldval($node, $field_name, $val_if_unset='', $delta=0) {

	$array = field_get_items('node', $node, $field_name);

	if ($array == FALSE) {
		return $val_if_unset;
	}
	else {
		return $array[$delta]['value'];
	}

}


/**
 * Given a node and a field-name, gets the filestring for posting the file in that field.
 *
 * Note: this way of passing a file is depricated in newer versions of PHP, but we have
 *    an older version that doesn't have the new, object-based way available yet.
 */
function tapashydra_filestring($node, $field_name, $val_if_unset='', $delta=0) {

	$array = field_get_items('node', $node, $field_name);

	if ($array) {
		$thumb_file = file_load($node->tc_field_image['und'][0]['fid']);
		return '@' . drupal_realpath($thumb_file->uri);
	} else {
		return $val_if_unset;
	}

}	


/**
 * Helper. Builds an HTTP array from multiple values in a Drupal field.
 *
 * @param $node: A drupal node.
 * @param $field_name: the name of a field that allows multiple values.
 *
 * @return: A string parsing the field values into an HTTP style array.
 */

function tapashydra_drupal_field_to_http_array($node, $field_name) {

	$value_list = field_get_items('node', $node, $field_name);

	$new_array = array();
	$i = 0;
	foreach ($value_list as $value) {
		$new_array[] = $value_list[$i]['value'];
	}

	return tapashydra_php_to_http_array($new_array);

}

/**
 * Helper. Converts a php array into an HTTP-formatted array.
 *
 * @param array(): The array to convert.
 * @param string: The http parameter receiving the array.
 *
 * @return string: The HTTP formatted array. (or FALSE, if the input array was empty).
 */

function tapashydra_php_to_http_array($array = array(), $param) {

	if (!$array()) {
		return FALSE;
	}

	$outstr_arr = '';
	$i = 0;

	foreach ($array as $item) {
		$outstr_arr .= "$param\[$i\]=$item";
	}

	return implode('&amp;', $outstring_arr);

}
