<?php

/**
 * @file 
 * tapascontent.install
 *
 * Creates the content types, field bases, and field instances for
 * TAPAS content types. Also removes them when the module is 
 * uninstalled.
 *
 * @author Linda Moss (GitHub LindaJeanne) <l.moss@neu.edu>
 * @since 2.0
 * @version 2.0
 */

/** Field name for collection-to-project OG audience link*/
define ('TAPAS_C_TO_P', 'og_tapas_c_to_p');
/** FIeld name for record-to-collection OG audience link */
define ('TAPAS_R_TO_C', 'og_tapas_r_to_c');
/** Field name for record-to-shared OG audience link */
define ('TAPAS_R_TO_S', 'og_tapas_r_to_s');

/** Name of sitewide paid-member role. Must match what's in the buildtapas profile! */
define ('TAPAS_PAIDMEMBER_ROLE_INSTALL', 'paidmember');
/** Name of sitewide admin role. Must match what's in the buildtapas profile! */
define ('TAPAS_ADMIN_ROLE_INSTALL', 'administrator');

//[> Project role names <]
//define ('TAPAS_PROJECT_ROLE_MEMBER', 'project_member');
//define ('TAPAS_PROJECT_ROLE_EDITOR', 'project_editor');
//define ('TAPAS_PROJECT_ROLE_ADMIN', 'project_administrator');

//[> Collection role names <]
//define ('TAPAS_COLLECTION_ROLE_MEMBER', 'collection_member');
//define ('TAPAS_COLLECTION_ROLE_EDITOR', 'collection_editor');
//define ('TAPAS_COLLECTION_ROLE_ADMIN', 'collection_administrator');




include_once('tapascontent_fields.inc');



/**
 * Implements hook_install()
 */

function tapascontent_install() {

	//make custom node types available at install
	node_types_rebuild();

	//create field bases
	$bases = tapas_field_bases();
	foreach ($bases as $field) {
		field_create_field($field);
	}

	field_info_cache_clear();

	_tapascontent_add_field_instances();
	_tapascontent_add_sitewide_permissions();
	_tapascontent_add_og_permissions();

}

/**
 * Implements hook_uninstall()
 */

function tapascontent_uninstall() {

	_tapascontent_revoke_og_permissions();
	_tapascontent_revoke_sitewide_permissions();

	
	$group_bundles = array(TAPAS_PROJECT, TAPAS_COLLECTION, TAPAS_SHARED);
	foreach($group_bundles as $bundle) {
		_tapascontent_remove_og_group_fields($bundle);
	}

	//Deleting the base automatically deletes all instances.
	$base_names = array_keys(tapas_field_bases());
	foreach ($base_names as $field) {
		field_delete_field($field);
	}


	node_type_delete(TAPAS_RECORD);
	node_type_delete(TAPAS_COLLECTION);
	node_type_delete(TAPAS_PROJECT);
	field_purge_batch(1000);
}

//=============================================================
// Field instances
//=============================================================

function _tapascontent_add_field_instances() {

	$allfields = _tapascontent_all_fields();

	foreach($allfields as $field) {
		field_create_instance($field);
	}

	$groups = array(TAPAS_PROJECT, TAPAS_COLLECTION, TAPAS_SHARED);

	foreach($groups as $bundle) {
		og_create_field(OG_GROUP_FIELD, 'node', $bundle);
		og_create_field(OG_ACCESS_FIELD, 'node', $bundle);
	}

	// Add OG Audience linking fields.
	_tapascontent_og_audience(TAPAS_COLLECTION, TAPAS_PROJECT, TAPAS_C_TO_P);
	_tapascontent_og_audience(TAPAS_RECORD, TAPAS_COLLECTION, TAPAS_R_TO_C);
	_tapascontent_og_audience(TAPAS_RECORD, TAPAS_SHARED, TAPAS_R_TO_S);

}


function _tapascontent_remove_field_instances() {

	// Remove OG field instances
	$fields = array(OG_GROUP_FIELD, OG_ACCESS_FIELD);

	foreach($fields as $field) {
		og_field_delete_instance(
			og_info_instance('node', $field, $bundle));
	}

}


/**
 * Helper function to generate the OG audience field for group content.
 *
 * @param string $content_bundle: name of the og content node-type.
 * @param string $group_bundle: name of the og group node-type to which
 *   the content item belongs.
 * @param string $link_name: The name for the reference field that will link
 *   the OG content to its OG group.
 */

function _tapascontent_og_audience($content_bundle, $group_bundle, $link_name) {

	$audience_field = og_fields_info(OG_AUDIENCE_FIELD);
	$audience_field['field']['settings']['target_type'] = $group_bundle;
	og_create_field($link_name, 'node', $content_bundle, $audience_field);

}
//=============================================================
// Sitewide Drupal roles & permissions
//=============================================================


/**
 * Add editing permissions for sitewide roles on installation.
 */

function tapascontent_add_sitewide_permissions() {

	$perms = _tapascontent_sitewide_permissions();
	$roles = _tapascontent_sitewide_role_rids();

	foreach($roles as $role) {
		user_role_grant_permission($role, $perms[$role]);
	}
	
}

/**
 * Remove editing permissions from sitewide roles on uninstall.
 */
function tapascontent_remove_sitewide_permissions() {

	$perms = _tapascontent_sitewide_permissions();
	$roles = _tapascontent_sitewide_role_rids();

	foreach($roles as $role) {
		user_role_revoke_permission($role, $perms[$role]);
	}
}


/**
 * Helper function to provide sitewide TAPASContent permissions arrays.
 */

function _tapascontent_sitewide_permissions() {

	// NOTE: regarding the generous use of "edit any":
	//   Organic Groups manages the "...if you are a member of the
	//   appropriate group" aspect of the permissions. OG can limit
	//   the permissions but not expand them.

	$basic_user = _tapascontent_permission_edit_own(TAPAS_RECORD);

	$paidmember = 
		_tapascontent_permission_edit_any(TAPAS_RECORD) +
		_tapascontent_permission_edit_any(TAPAS_COLLECTION) +
		_tapascontent_permission_eidt_own(TAPAS_PROJECT);

	$admin = 
		_tapascontent_permission_edit_any(TAPAS_RECORD) +
		_tapascontent_permission_edit_any(TAPAS_COLLECTION) +
		_tapascontent_permission_edit_any(TAPAS_SHARED) +
		_tapascontent_permission_edit_any(TAPAS_PROJECT);

	$paidmember_rid = array_search(TAPAS_PAIDMEMBER_ROLE, user_roles());
	$admin_rid = array_search(TAPAS_ADMIN_ROLE, user_roles());

	return array(
		DRUPAL_AUTHENTICATED_RID => $basic_user,
		$paidmember_rid => $paidmember,
		$admin_rid => $admin);


}

/**
 * Helper function providing array of sitewide role rids.
 */

function _tapascontent_sitewide_role_rids() {

	$paidmember_rid = array_search(TAPAS_PAIDMEMBER_ROLE, user_roles());
	$admin_rid = array_search(TAPAS_ADMIN_ROLE, user_roles());

	return array(
		DRUPAL_AUTHENTICATED_RID,
		$paidmember_rid,
		$admin_rid);

}
//=============================================================
// Organic Groups Group roles & permissions
//=============================================================


function tapascontent_setup_og_permissions() {

	// Let user create, update, and delete their own shared repo record content
	$roles = og_roles('node', TAPAS_SHARED);
	$role_id = array_search('member', $roles);
	og_role_grant_permissions($role_id, _tapascontent_og_perms_edit_own(TAPAS_RECORD));

	// Create Editor roles
	_tapascontent_create_og_editing_role(TAPAS_COLLECTION, TAPAS_RECORD, FALSE);
	_tapascontent_create_og_editing_role(TAPAS_PROJECT, TAPAS_COLLECTION, FALSE);

	// Create Admin Roles
	_tapascontent_create_og_editing_role(TAPAS_COLLECTION, TAPAS_RECORD, TRUE);
	_tapascontent_create_og_editing_role(TAPAS_PROJECT, TAPAS_COLLECTION, TRUE);

}

function tapascontent_remove_og_permissions() {



}


/**
 * Helper function for creating OG editor/admin roles.
 *
 * @param string $type
 *    The bundle name of the group node
 * @param string $subtype 
 *    The bundle name of the content node
 * @param boolean $admin 
 *    True for "Admin", false for "Editor"
 *
 * @return int $rid
 *    The RoleID (rid) of the newly created role
 */
function _tapascontent_create_og_editing_role($type, $subtype, $admin=FALSE) {
	$rolename = $admin?"$type Admin":"$type Editor";

	$role = og_role_create($rolename, 'node', NULL, $type);
	og_role_grant_permissions($role->rid, _tapascontent_og_perms_edit_any($subtype));
	
	if ($admin) {
		og_role_grant_permissions($role->rid, _tapascontent_og_perms_admin($type));
	}

	$og_role_save($role);
	return $role->rid;

}


/**
 * Helper function returning "admin" permissions
 */
function _tapascontent_og_perms_admin($type) {

	return array(
		'add user',
		'administer group',
		'approve and deny subscription',
		'manage memners',
		'update_group',
	);
}
//=======================================================================
// Roles and permissions helper functions relevant to both Drupal and OG
//=======================================================================


/**
 * Helper function returning basic "edit own" permissions.
 */
function _tapascontent_permsission_edit_own($type) {
	return array(
		'create ' . $type . ' content',
		'edit own ' . $type . 'content',
		'delete own ' . $type . 'content',
	);

}

/**
 * Helper function returning "edit any" permissions
 */
function _tapascontent_permission_edit_any($type) {

	return array(
		'create ' . $type . ' content',
		'edit own ' . $type . ' content',
		'edit any ' . $type . ' content',
		'delete own ' . $type . ' content',
		'delete any ' . $type . ' content',
	);
}
