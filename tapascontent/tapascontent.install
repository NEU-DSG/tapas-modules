<?php

/**
 * @file 
 * tapascontent.install
 *
 * Creates the content types, field bases, and field instances for
 * TAPAS content types. Also removes them when the module is 
 * uninstalled.
 *
 * @author Linda Moss (GitHub LindaJeanne) <l.moss@neu.edu>
 * @since 2.0
 * @version 2.1
 */

include_once('tapascontent_fields.inc');

/** Field name for collection-to-project OG audience link*/
define ('TAPAS_C_TO_P', 'og_tapas_c_to_p');
/** FIeld name for record-to-collection OG audience link */
define ('TAPAS_R_TO_C', 'og_tapas_r_to_c');
/** Field name for record-to-shared OG audience link */
define ('TAPAS_R_TO_S', 'og_tapas_r_to_s');

/** Name of sitewide paid-member role. Must match what's in the buildtapas profile! */
define ('TAPAS_PAIDMEMBER_ROLE_PROFILE', 'paidmember');
/** Name of sitewide admin role. Must match what's in the buildtapas profile! */
define ('TAPAS_ADMIN_ROLE_PROFILE', 'administrator');

//[> Project role names <]
define ('TAPAS_PROJECT_ROLE_EDITOR', 'Project Editor');
define ('TAPAS_PROJECT_ROLE_ADMIN', 'Project Administrator');

//[> Collection role names <]
define ('TAPAS_COLLECTION_ROLE_EDITOR', 'Collection Editor');
define ('TAPAS_COLLECTION_ROLE_ADMIN', 'Collection Administrator');

/**
 * Implements hook_install()
 */

function tapascontent_install() {

	//make custom node types available at install
	node_types_rebuild();

	_tapascontent_add_fields();
	_tapascontent_grant_sitewide_permissions();
	node_access_rebuild();

	_tapascontent_setup_og_bundles();
	node_access_rebuild();
}

/**
 * Implements hook_uninstall()
 */

function tapascontent_uninstall() {

	drupal_set_message("removing sitewide permissions on custom types...");
	_tapascontent_revoke_sitewide_permissions();


	drupal_set_message("removing OG field instances from custom types..");
	_tapascontent_delete_og_instances();


	drupal_set_message("Deleting custom fields...");
	//Deleting the base automatically deletes all instances.
	// (note that the reverse is also true: deleting all instances removes the base.)
	$base_names = array_keys(tapas_field_bases());
	foreach ($base_names as $field) {
		field_delete_field($field);
	}

	drupal_set_message("Deleting custom node types...");
	node_types_rebuild();
	$custom_node_types = array(
		TAPAS_RECORD,
		TAPAS_COLLECTION,
		TAPAS_PROJECT,
		TAPAS_SHARED);

	foreach($custom_node_types as $type) {
		if (node_type_load($type)) {
			node_type_delete($type);
		}
	}

	drupal_set_message("Batching changes...");
	field_purge_batch(1000);

	drupal_set_message("Finished uninstall.");
}

//=============================================================
// Field instances
//=============================================================

function _tapascontent_add_fields() {

	drupal_set_message("Creating field bases...");
	$bases = tapas_field_bases();
	foreach ($bases as $field) {
		if (!field_info_field($field['field_name'])) {
			field_create_field($field);
		}
	}

	field_info_cache_clear();

	drupal_set_message("Adding field instances...");
	$allfields = _tapascontent_all_fields();
	foreach($allfields as $field) {
		if (!field_info_instance('node', $field['field_name'], $field['bundle'])) {
			field_create_instance($field);
		}
	}


}


/**
 * Helper function to delete og field instances during uninstall.
 */
function _tapascontent_delete_og_instances() {

	// Since this is PHP, the objects I set up during install
	// are no longer around, so I can't make the uninstall into
	// member functions. Still keeping the OOP to help with the
	// translation to Ruby. Not going to recreate the objects here
	// just to delete them, though.

	$audience_fields = array(
		TAPAS_R_TO_S => TAPAS_RECORD,
		TAPAS_R_TO_C => TAPAS_RECORD,
		TAPAS_C_TO_P => TAPAS_COLLECTION);

	foreach($audience_fields as $fieldname=>$bundle) {
		og_field_delete_instance(
			field_info_instance('node', $fieldname, $bundle));
	}

	$group_bundles = array(TAPAS_SHARED, TAPAS_COLLECTION, TAPAS_PROJECT);

	foreach($group_bundles as $bundle) {
		og_field_delete_instance(
			field_info_instance('node', OG_DEFAULT_ACCESS_FIELD, $bundle));
		og_field_delete_instance(
			field_info_instance('node', OG_GROUP_FIELD, $bundle));
	}

	// Confirmed that removing `group` field instances also removes the
	// associated OG roles automatically.

}

//=============================================================
// Sitewide Drupal roles & permissions
//=============================================================

/**
 * Add editing permissions for new node types
 */

function _tapascontent_grant_sitewide_permissions() {


	$basic_member = new Tapascontent_SitewideRoleWrapper(
		DRUPAL_AUTHENTICATED_RID);
	$basic_member->grant_edit_own([TAPAS_RECORD]);

	$paid_member = new Tapascontent_SitewideRoleWrapper(
		TAPAS_PAIDMEMBER_ROLE_PROFILE, FALSE);
	$paid_member->grant_edit_own([TAPAS_PROJECT, TAPAS_COLLECTION]);
	$paid_member->grant_edit_any([TAPAS_COLLECTION, TAPAS_RECORD]);

	$admin = new Tapascontent_SitewideRoleWrapper(
		TAPAS_ADMIN_ROLE_PROFILE, FALSE);
	$admin->grant_edit_any([TAPAS_RECORD, TAPAS_SHARED, TAPAS_COLLECTION, TAPAS_PROJECT]);
	$admin->grant_admin();

}

/**
 * Remove editing permissions from sitewide roles on uninstall.
 */
function _tapascontent_revoke_sitewide_permissions() {

	$basic_member = new Tapascontent_SitewideRoleWrapper(
		DRUPAL_AUTHENTICATED_RID);
	$basic_member->revoke_edit_own([TAPAS_PROJECT, TAPAS_COLLECTION]);

	$paid_member = new Tapascontent_SitewideRoleWrapper(
		TAPAS_PAIDMEMBER_ROLE_PROFILE, FALSE);
	$paid_member->revoke_edit_any([TAPAS_COLLECTION, TAPAS_RECORD]);
	$paid_member->revoke_edit_own([TAPAS_PROJECT]);

	$admin = new Tapascontent_SitewideRoleWrapper(
		TAPAS_ADMIN_ROLE_PROFILE, FALSE);
	$admin->revoke_admin();
	$admin->revoke_edit_any([TAPAS_RECORD, TAPAS_SHARED, TAPAS_COLLECTION, TAPAS_PROJECT]);

}


//=============================================================
// Organic Groups Group roles & permissions
//=============================================================

function _tapascontent_setup_og_bundles() {


	$project = new Tapascontent_OgBundleGroupWrapper(TAPAS_PROJECT);
	$collection = new Tapascontent_OgBundleGroupWrapper(TAPAS_CONTENT);
	$shared = new Tapascontent_OgBundleGroupWrapper(TAPAS_SHARED);
	$tei_record = new Tapascontent_OgBundleWrapper(TAPAS_RECORD);

	// Define OG Audience
	$tei_record->add_audience_fields(TAPAS_COLLECTION, TAPAS_R_TO_C);
	$tei_record->add_audience_fields(TAPAS_SHARED, TAPAS_R_TO_S);
	$collection->add_audience_fields(TAPAS_PROJECT, TAPAS_C_TO_P);

	// Create Roles and Set permissions
	$project->create_admin_role(TAPAS_PROJECT_ROLE_ADMIN);
	$project->create_editor_role(TAPAS_PROJECT_ROLE_EDITOR);
	$collection->create_admin_role(TAPAS_COLLECTION_ROLE_ADMIN);
	$collection->create_editor_role(TAPAS_COLLECTION_ROLE_EDITOR);
	$shared->create_admin_role(TAPAS_SHARED_ROLE_ADMIN);

	$project->get_role()->grant_edit_own([TAPAS_RECORD, TAPAS_COLLECTION]);
	$collection->get_role()->grant_edit_own([TAPAS_RECORD]);
	$shared->get_role()->grant_edit_own([TAPAS_RECORD]);
}

//=====================================================================
// OG Bundle Wrapper
//=====================================================================


interface tapascontent_iOgBundleWrapper
{
	function add_audience_fields($fieldname, $bundle);
}

interface Tapascontent_iOgBundleGroupWrapper
extends tapascontent_iOgBundleWrapper
{
	function create_role();
	function get_role();
	function add_group_fields();
	function create_editor_role();
	function create_admin_role();
}

class Tapascontent_OgBundleWrapper
implements Tapascontent_iOgBundleWrapper
{
	// TODO: some might belong in a connector class
	public function add_audience_fields($fieldname, $parent_bundle) {
		$audience_field = og_fields_info(OG_AUDIENCE_FIELD);
		$audience_field['field']['settings']['target_type'] = 'node';
		$audience_field['field']['settings']['handler_settings']['target_bundle'] = array($parent_bundle);
		og_create_field($fieldname, 'node', $this->bundle, $audience_field);
	}
}

class Tapascontent_OgBundleGroupWrapper
extends Tapascontent_OgBundleWrapper
implements Tapascontent_iOgBundleGroupWrapper
{
	private $roles = array();

	const MEMBER_ROLE = 'member';

	public function __construct($og_role_connector, $bundle)
	{
		parent::__construct($bundle, $og_role_connector);
		$member_rid = $og_role_connector->get_rid($self::MEMBER_ROLE);
		$this->roles[$self::MEMBER_ROLE] = new Tapascontent_OgRoleWrapper(
			$og_role_connector, $bundle, $member_rid);
		$og_role_connector->add_group_fields($bundle);
	}

	public function get_role($role_name = NULL) 
	{ return $this->roles[$role_name?$role_name:$self::MEMBER_ROLE]; }

	public function create_role($name) {
		$new_rid = $this->connector()->create_new_role($name);
		$this->roles[$name] = new Tapascontent_OgRoleWrapper(
			$this->connector(), $this->bundle(), $new_rid);
		return $this->roles[$name];
	}
	
	public function create_new_role($name) { //TODO: belongs in a connector class;
			$role = og_role_create($name, 'node', NULL, $this->bundle);
			return og_role_save($role);
	}

	public function create_editor_role($role_name) 
	{
		$editor = $this->create_role($role_name);
		foreach($this->audience() as $type) { $editor->grant_edit_any($type); }
	}

	public function create_admin_role($role_name)
	{
		$admin = $this->create_role($role_name);
		$admin->grant_edit_admin();
		foreach($this->audience as $type) { $editor->edit_any($type); }
	}
}
