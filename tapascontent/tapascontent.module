<?php

/**
 * @file
 * tapascontent.module
 *
 * @author Linda Moss (GitHub LindaJeanne) <l.moss@neu.edu>
 * @since 2.0
 * @version 2.1
 *
 * @TODO: Enfore Record group must 1. be Collection (not project) 2. Collections from same group.
 */

include_once('tapascontent_nodewrapper.inc');
include_once('tapascontent_solr_indexing.inc');
include_once('tapascontent_common.inc');

// ====================================================================================
// Content Type Descriptions
// ====================================================================================

/* User-facing descriptions for content types. */
define ('TAPAS_CONTENT_PROJ_DESC', '');
define ('TAPAS_CONTENT_COLL_DESC', '');
define ('TAPAS_CONTENT_SHARED_DESC', '');
define ('TAPAS_CONTENT_REC_DESC', '');

/* User-facing help text for content types. */
define ('TAPAS_CONTENT_PROJ_HELP', '');
define ('TAPAS_CONTENT_COLL_HELP', '');
define ('TAPAS_CONTENT_SHARED_HELP', '');
define ('TAPAS_CONTENT_REC_HELP', '');


$prod_factory = new Tapascontent_WrapperFactory();

// ====================================================================================
// Functions implementing hooks
// ====================================================================================

/**
 * Imlements hook_node_info().
 */

function tapascontent_node_info() {
	$items = array(
		TAPAS_SHARED => array(
			'name' => t('TAPAS Shared Repository'),
			'base' => 'node_content',
			'description' => TAPAS_CONTENT_SHARED_DESC,
			'has_title' => TRUE,
			'title_label' => 'Shared Repository Title',
			'help' => TAPAS_CONTENT_SHARED_HELP,
		),
		TAPAS_PROJECT => array(
			'name' => t('TAPAS Project'),
			'base' => 'node_content',
			'description' => TAPAS_CONTENT_PROJ_DESC,
			'has_title' => TRUE,
			'title_label' => t('Project Title'),
			'help' => TAPAS_CONTENT_PROJ_HELP,
		),
		TAPAS_COLLECTION => array(
			'name' => t('TAPAS Collection'),
			'base' => 'node_content',
			'description' => TAPAS_CONTENT_COLL_DESC,
			'has_title' => TRUE,
			'title_label' => t('Collection Title'),
			'help' => TAPAS_CONTENT_COLL_HELP,
		),
		TAPAS_RECORD => array(
			'name' => t('TAPAS TEI Record'),
			'base' => 'node_content',
			'description' => TAPAS_CONTENT_REC_DESC,
			'has_title' => TRUE,
			'title_label' => t('Display Title'),
			'help' => TAPAS_CONTENT_REC_HELP,
		)
	);

	drupal_alter('node_info', $items);
	return $items;

}

/**
 * Implements hook_form().
 *
 * Debugging Note: this has to be present, even if it's just a pass-trough,
 *   otherwise the content type won't appear in the admin/structure/types list.
 */

function tapascontent_form(&$node, $form_state) {
	return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_postinsert().
 */
function tapascontent_node_postinsert($node) {
	global $prod_factory;
	$result = $prod_factory->wrap_node($node)->upsert();
	//TODO: Handle result.
}

/**
 * Implements hook_node_postupdate().
 */
function tapascontent_node_postupdate($node) {
	global $prod_factory;
	$result = $prod_factory->wrap_node($node)->upsert();
	// TODO: Handle result.
}

/**
 * Implements hook_node_delete().
 *
 * Calls the Hydra API to delete the record.
 */
function tapascontent_node_delete($node) {
	global $prod_factory;
	$result = $prod_factory->wrap_node($node)->delete();
	//TODO: Handle result
}

/**
 * Implements hook_node_presave()
 */
function tapascontent_node_presave() {
	global $prod_factory;
	$result = $prod_factory->wrap_node($node)->presave();
	//TODO: handle result.
}

function _tapascontent_watchdog($msg, $err_level = WATCHDOG_DEBUG) {
  watchdog('tapascontent', $msg, array(), $err_level);
}

function tapascpntent_do_bulk_upload($file_array) { //TODO
	foreach ($filearray as $file) {
		global $prod_factory;
		$node = $prod_factory->drupal->create_record();
		$wrapped = $prod_factory->wrap_node($node);
		$wrapped->set_field('field_tapas_tei_file', $file);
		$wrapped->presave();
		$wrapped->upsert();
	}
}

//=======================================================================
// Viewing the TEI record.
//=======================================================================

/**
 * Implements hook_node_view
 */

function tapascontent_node_view($node, $view_mode, $langcode) {
	if ($node->type == TAPAS_RECORD && $view_mode == 'full') {
		tapascontent_view_tei_record($node);
	}
}

function tapascontent_preprocess_node(&$variables){
  $node = $variables['elements']['#node'];
  switch($node->type){
    case 'tapas_record':
      // dpm($node);
      $groups = field_group_read_groups(array(
        'name' => 'node',
        'bundle' => 'tapas_record',
        'view_mode' => 'full'));
      $reader_group = $groups['node']['tapas_record']['full']['group_record_reader_content'];
      $reader_group->children[] = 'tapas_tab_reader';
      field_group_group_save($reader_group);
			$meta_group = $groups['node']['tapas_record']['full']['group_record_metadata_content'];
			$meta_group->children[] = 'tapas_tab_meta';
			field_group_group_save($meta_group);
      break;
  }
}

//=======================================================================
// Wild Apricot
//=======================================================================

// Implements hook_user_login to perform wild apricot checking
function tapascontent_user_login(&$edit, $user) {
  $key = variable_get('wild_apricot_api_key', false);

  // No API key set - this is a dev environment and we don't care
  // about paid vs nonpaid members.  Skip.
  if (!$key) {
    return null;
  }

  $member_rid = user_role_load_by_name('paidmember')->rid;

  // Checks if Wild Apricot says the user is a paid member
  $is_paid_member = _tapascontent_is_paid_member($user->mail);

  // Checks if the user is currently flagged as a paid member
  $currently_member = array_key_exists($member_rid, $user->roles);

  if (($is_paid_member === true) and ($currently_member === false)) {
    user_multiple_role_edit([$user->uid], 'add_role', $member_rid);
    //drupal_set_message("TEI Membership confirmed, you now have full access to the TAPAS service.");
  } elseif (($is_paid_member === false) and ($currently_member === true)) {
    user_multiple_role_edit([$user->uid], 'remove_role', $member_rid);
    $msg = "Our records indicate that you are no longer a TEI Member.  You now have limited access to" .
      " the TAPAS Service.  If this was done in error, please contact us.";
    //drupal_set_message($msg);
  } elseif ($is_paid_member === null) {
    $msg = "Failed to contact Wild Apricot about membership status of"
      . " $user->mail.   Proceeding without changes made to user status";
    _tapascontent_watchdog($msg, WATCHDOG_NOTICE);
  }
}

// Fair Warning: If you call this function from boris multiple times every call
// after the first will hang on getting $async_result back and eventually the
// function returns null.  I have 100% no idea why this is happening, but it
// doesn't seem to be buggy outside of the boris environment.
function _tapascontent_is_paid_member($email) {
  $key = variable_get('wild_apricot_api_key', false);
  $aid = '66796';

  $query_url  = "https://api.wildapricot.org/v1/Accounts/$aid/Contacts?apikey=$key&\$filter=";
  $query_url .= "'e-Mail'%20eq%20'".$email."'";
  $query_url .= "&\$select='Membership%20Status'";

  // This is the JSON response returned by the API call in toto
  $async_result = _tapascontent_curl_get_apricot($query_url);

  // Check the WildApricot server once every ten seconds or until our
  // query is complete.
  $i = 0;
  while((($async_result === null) or ($async_result->State != 'Complete')) and ($i <= 10)) {
    sleep(1);
    $async_result = _tapascontent_curl_get_apricot($query_url);
    $i += 1;
  }

  if(is_object($async_result) and ($async_result->State === 'Complete')) {
    $result_url = $async_result->ResultUrl."&apikey=$key";
    $result = _tapascontent_curl_get_apricot($result_url);

    // In the case where $result is null, goofily loop hoping that Wild Apricot
    // will snap out of it.
    $step_two_i = 0;
    while(($result === null) and ($step_two_i <= 10)) {
      sleep(1);
      $result = _tapascontent_curl_get_apricot($result_url);
      $step_two_i += 1;
    }

    if ($result === null) {
      return null;
    }

    $users = $result->Contacts;
    $user_count = count($users);

    // In the case where no users were returned, the email address
    // we entered is associated with a user that doesn't exist according to
    // the TEIC.  Not a paid member.
    if($user_count === 0) {
      return false;
    }

    // Too many users were returned by the query -
    // email addresses should not be ambiguous so we return null
    if($user_count > 1) {
      $msg = "Wild Apricot returned $user_count users when asked for the user" .
        " with email address $email.  Skipping paid member status grant/revoke.";
      _tapascontent_watchdog($msg, WATCHDOG_ERROR);
      return null;
    }

    $status = $users[0]->Status;

    if ($status === 'Active') {
      return true;
    } elseif ($status != null) {
      return false;
    } else {
      return null;
    }
  } else {
    return null;
  }
}

function _tapascontent_curl_get_apricot($url) {
  $curl = curl_init($url);
  curl_setopt($curl, CURLOPT_HTTPHEADER, ["Accept: application/json"]);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

  $result = json_decode(curl_exec($curl));
  curl_close($curl);
  return($result);
}
